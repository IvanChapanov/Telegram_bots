from curses.ascii import isdigit
from types import NoneType

import telebot
from telebot import types
import os
import datetime
from pathlib import Path
from config import TOKEN
import json
from typing import cast
import psycopg2
from zoneinfo import ZoneInfo
from psycopg2 import sql
from telebot.handler_backends import State, StatesGroup



bot = telebot.TeleBot(TOKEN)
target_user_id = 178945372
property_type = None
folder_path = None
square = None
project_path = Path(__file__).parent

class UserStates(StatesGroup):
	waiting_contact = State()
	waiting_contact_guide = State()

user_data = {}
contact_state = {}
class User:

	def __init__(self, first_name):
		self.user_id = 0
		self.first_name = first_name
		self.user_name = ''
		self.square = float
		self.date = datetime.datetime

def load_dbconfig(config_file='dbconfig.json'):
	with open(config_file) as f:
		return json.load(f)

config = load_dbconfig()
db_config = config['database']

def check_db_connection():
	try:
		conn = psycopg2.connect(
			dbname=db_config['dbname'],
			user=db_config['user'],
			password=db_config['password'],
			host=db_config['host'],
			port=db_config['port']
		)
		conn.close()
		return True
	except Exception as e:
		print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
		return False

# cursor = conn.cursor
# cursor.execute(f'CREATE TABLE users (user_id INT,'
# 			   						f'first_name varchar(100),'
# 			   						f'user_name varchar(100),'
# 									f'square float,'
# 									f'datetime datetime)'
# 			   )

def insert_user_data(message, reason):
	conn = psycopg2.connect(
		dbname=db_config['dbname'],
		user=db_config['user'],
		password=db_config['password'],
		host=db_config['host'],
		port=db_config['port']
	)
	cursor = conn.cursor()
	user_data[message.from_user.id].user_name = message.from_user.username
	user_data[message.from_user.id].square = square
	user_data[message.from_user.id].date = datetime.datetime.now()
	user_iter = iter(user_data.keys())
	user_id = next(user_iter)
	user = user_data[user_id]
	user_id = message.from_user.id
	sql = 'INSERT INTO dbo.users (user_id, first_name, user_name, square, datetime, reason) VALUES (%s, %s, %s, %s ,%s, %s)'
	val = (user_id, user.first_name, user.user_name, user.square, user.date, reason)
	cursor.execute(sql, val)
	conn.commit()
	user_data.clear()

def format_table(column_names, rows):
	# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
	table = ""

	# –î–æ–±–∞–≤–ª—è–µ–º —à–∞–ø–∫—É
	table += " | ".join(column_names) + "\n"
	table += "-" * (len(column_names) * 18) + "\n"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —à–∞–ø–∫–∏

	# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	for row in rows:
		table += " | ".join(map(str, row)) + "\n"
	return table

def send_table(chat_id, table):
	bot.send_message(chat_id, f"<pre>{table}</pre>", parse_mode='HTML')

def start_message(message):
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	info_btn = types.KeyboardButton('üñåÔ∏è –û —Å—Ç—É–¥–∏–∏')
	markup.row(info_btn)
	calc_btn = types.KeyboardButton('üí∏ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—Å—á–µ—Ç')
	descr_btn = types.KeyboardButton('üìã –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥')
	markup.row(calc_btn, descr_btn)
	guide_btn = types.KeyboardButton('üß≠ –ì–∞–π–¥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É')
	markup.row(guide_btn)
	main_photo = Path(f'{project_path}/Main_photo/Maria_main_photo.jpg')
	with open ('Text/Greeting.txt', 'r', encoding='utf-8') as file:
		lines = file.readlines()
	first_message = f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n\n' + ''.join(lines)
	bot.send_photo(message.chat.id, photo=open(main_photo, 'rb'), caption=first_message,
				   reply_markup=markup)

def menu_message(message):
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	info_btn = types.KeyboardButton('üñåÔ∏è –û —Å—Ç—É–¥–∏–∏')
	markup.row(info_btn)
	calc_btn = types.KeyboardButton('üí∏ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—Å—á–µ—Ç')
	descr_btn = types.KeyboardButton('üìã –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥')
	markup.row(calc_btn, descr_btn)
	guide_btn = types.KeyboardButton('üß≠ –ì–∞–π–¥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É')
	markup.row(guide_btn)
	bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
	 					 reply_markup=markup)

def menu_message_from_guide(message):
	user_data[message.from_user.id] = User(message.from_user.first_name)
	insert_reason = '–°–∫–∞—á–∞–ª–∏ –≥–∞–π–¥, –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞'
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	info_btn = types.KeyboardButton('üñåÔ∏è –û —Å—Ç—É–¥–∏–∏')
	markup.row(info_btn)
	calc_btn = types.KeyboardButton('üí∏ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—Å—á–µ—Ç')
	descr_btn = types.KeyboardButton('üìã –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥')
	markup.row(calc_btn, descr_btn)
	guide_btn = types.KeyboardButton('üß≠ –ì–∞–π–¥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É')
	markup.row(guide_btn)
	bot.send_message(message.chat.id, f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª-–≥–∞–π–¥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ü§ó',
	 					 reply_markup=markup)
	guide_file = Path(f'{project_path}/Files/–ì–∞–π–¥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É.pdf')
	bot.send_document(message.chat.id, document=open(guide_file, 'rb'))
	insert_user_data(message, insert_reason)


@bot.message_handler(commands=['start'])
def handle_start(message):
	start_message(message)

def ask_for_contact(message):
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
	keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
	button_contact = types.KeyboardButton(text="üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
	button_menu = types.KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
	keyboard.add(button_contact,button_menu)
	message_text = (f'–ï—Å–ª–∏ –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ,\n'
					f'–ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏')
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	if isinstance(message,types.Message):
		bot.send_message(message.chat.id, message_text
						 ,reply_markup=keyboard)
	elif isinstance(message,types.CallbackQuery):
		bot.send_message(message.message.chat.id, message_text
						 ,reply_markup=keyboard)
	bot.set_state(message.from_user.id, UserStates.waiting_contact, message.chat.id)

def ask_for_contact_guide(message):
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
	keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
	button_contact = types.KeyboardButton(text="üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥", request_contact=True)
	button_menu = types.KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥")
	keyboard.add(button_contact,button_menu)
	message_text = (f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –Ω–∞ —Å–∫–∏–¥–∫–∏, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n\n'
					f'–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	if isinstance(message,types.Message):
		bot.send_message(message.chat.id, message_text
						 ,reply_markup=keyboard)
	elif isinstance(message,types.CallbackQuery):
		bot.send_message(message.message.chat.id, message_text
						 ,reply_markup=keyboard)
	bot.set_state(message.from_user.id, UserStates.waiting_contact_guide, message.chat.id)

def insert_contact(message,reason):
	# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ (UTC+5)
	tz_ekb = ZoneInfo('Asia/Yekaterinburg')
	date = datetime.datetime.now(tz_ekb)
	conn = psycopg2.connect(
		dbname=db_config['dbname'],
		user=db_config['user'],
		password=db_config['password'],
		host=db_config['host'],
		port=db_config['port']
		)
	cursor = conn.cursor()
	contact = message.contact
	phone_number = contact.phone_number
	first_name = contact.first_name
	last_name = contact.last_name if contact.last_name else ""
	date = datetime.datetime.now()
	sql_query = f"INSERT INTO dbo.users (phone_number, first_name, last_name, datetime, reason) VALUES (%s, %s, %s, %s, %s)"
	val = (phone_number, first_name, last_name, date, reason)
	cursor.execute(sql_query, val)
	conn.commit()


	# print(f'{phone_number},{type(phone_number)}')
	# except Exception as e:
	# 	pass

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
		with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
			current_state = bot.get_state(message.from_user.id, message.chat.id)
		if current_state == UserStates.waiting_contact.name:
			while message.contact is not None:
				try:
					reason_insert = '–ü—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è'
					insert_contact(message, reason_insert)
					bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èü§ó')
					menu_message(message)
					message.contact = None
					break
				except Exception as e:
					pass

		elif current_state == UserStates.waiting_contact_guide.name:
			while message.contact is not None:
				try:
					reason_insert = '–°–∫–∞—á–∞–ª–∏ –≥–∞–π–¥, –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç'
					insert_contact(message, reason_insert)
					bot.send_message(message.chat.id, f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª-–≥–∞–π–¥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ü§ó')
					guide_file = Path(f'{project_path}/Files/–ì–∞–π–¥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É.pdf')
					bot.send_document(message.chat.id, document=open(guide_file, 'rb'))
					menu_message(message)
					message.contact = None
					bot.delete_state(message.from_user.id, message.chat.id)
					break
				except Exception as e:
					pass

@bot.message_handler(content_types=['text'])
def on_click(message):
	if message.text.lower() == 'üìã –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥':
		service_description(message)
	elif message.text.lower() == 'üñåÔ∏è –æ —Å—Ç—É–¥–∏–∏':
		studio_info(message)
	elif message.text.lower() == 'üí∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—Å—á–µ—Ç':
		personal_calc(message)
	elif message.text.lower() == 'üè† –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
		menu_message(message)
	elif message.text.lower() == 'üè† –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥':
		menu_message_from_guide(message)
	elif message.text.lower() == 'üß≠ –≥–∞–π–¥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É':
		ask_for_contact_guide(message)



def service_description(message):
	descr_photo_dir = Path(f'{project_path}/description_photo')
	for file in os.listdir(descr_photo_dir):
		with open(os.path.join(descr_photo_dir, file), 'rb') as photo:
			bot.send_photo(message.chat.id,photo)

def studio_info(message):
	markup_info = types.InlineKeyboardMarkup()
	pictures = types.InlineKeyboardButton(text = f'üñºÔ∏è –ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã'
														,callback_data='info_–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã')
	about = types.InlineKeyboardButton('üíÅ –û–±–æ –º–Ω–µ', callback_data='info_–û–±–æ –º–Ω–µ')
	contacts = types.InlineKeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='info_–ö–æ–Ω—Ç–∞–∫—Ç—ã')
	portfolio = types.InlineKeyboardButton('üìÇ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤', callback_data='info_–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ')
	markup_info.row(about, contacts)
	markup_info.row(pictures)
	markup_info.row(portfolio)
	bot.send_message(message.chat.id, f'–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ ü§ó',
					 reply_markup=markup_info)

@bot.callback_query_handler(func=lambda call: call.data.startswith('info_'))
def info(call):
	if call.data == 'info_–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã':
		global folder_path
		folder_path = Path(f'{project_path}/Portfolio/Pictures')
		pictures = []
		for filename in os.listdir(folder_path):
			if filename.endswith(('.png', '.jpg', '.jpeg', '.gif')):  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
				file_path = os.path.join(folder_path, filename)
				photo_file = cast(str, file_path)
				pictures.append(telebot.types.InputMediaPhoto(open(photo_file, 'rb')))
		with open('Text/pictures.txt', 'r', encoding='utf-8') as file:
			lines = file.readlines()
		picture_message = ''.join(lines)
		bot.send_message(call.from_user.id, picture_message)
		bot.send_media_group(call.message.chat.id, pictures)
		ask_for_contact(call.message)
		handle_contact(call.message)

		# bot.register_next_step_handler(call.message, menu_message)
	elif call.data == 'info_–û–±–æ –º–Ω–µ':
		with open('Text/about_me.txt', 'r', encoding='utf-8') as file:
			lines = file.readlines()
		contacts_info = ''.join(lines)
		bot.send_message(call.from_user.id, contacts_info)
	elif call.data == 'info_–ö–æ–Ω—Ç–∞–∫—Ç—ã':
		with open('Text/contacts.txt', 'r', encoding='utf-8') as file:
			lines = file.readlines()
		contacts_info = f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n' + ''.join(lines)
		bot.send_message(call.from_user.id, contacts_info)
	elif call.data == 'info_–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ':
		portfolio(call)

@bot.callback_query_handler(func=lambda call: call.data == 'info_–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ')
def portfolio(call):
	markup = types.InlineKeyboardMarkup()
	bedroom = types.InlineKeyboardButton('üõèÔ∏èÔ∏è –°–ø–∞–ª—å–Ω–∏', callback_data='portfolio_–°–ø–∞–ª—å–Ω–∏')
	living_room = types.InlineKeyboardButton('üõãÔ∏è –ö—É—Ö–Ω–∏-–≥–æ—Å—Ç–∏–Ω—ã–µ', callback_data='portfolio_–ö—É—Ö–Ω–∏-–≥–æ—Å—Ç–∏–Ω—ã–µ')
	child_room = types.InlineKeyboardButton('ü§∏ –î–µ—Ç—Å–∫–∏–µ', callback_data='portfolio_–î–µ—Ç—Å–∫–∏–µ')
	bathroom = types.InlineKeyboardButton('üõÅ –í–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–∞–Ω—É–∑–ª—ã', callback_data='portfolio_–í–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–∞–Ω—É–∑–ª—ã')
	markup.row(bedroom,living_room)
	markup.row(child_room)
	markup.row(bathroom)
	bot.send_message(call.message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
					 reply_markup=markup)

@bot.callback_query_handler(func=lambda call:call.data.startswith('portfolio_'))
def callback_portfolio(call):
	global folder_path
	folder_path = project_path  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
	media = []

	if call.data[10:] == '–°–ø–∞–ª—å–Ω–∏':
		folder_path = Path(f'{project_path}/Portfolio/BedRoom')
	elif call.data[10:] == '–ö—É—Ö–Ω–∏-–≥–æ—Å—Ç–∏–Ω—ã–µ':
		folder_path = Path(f'{project_path}/Portfolio/LivingRoom')
	elif call.data[10:] == '–í–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–∞–Ω—É–∑–ª—ã':
		folder_path = Path(f'{project_path}/Portfolio/BathRoom')
	elif call.data[10:] == '–î–µ—Ç—Å–∫–∏–µ':
		folder_path = Path(f'{project_path}/Portfolio/ChildrenRoom')
	# –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ
	for filename in os.listdir(folder_path):
		if filename.endswith(('.png', '.jpg', '.jpeg', '.gif')):  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			file_path = os.path.join(folder_path, filename)
			photo_file = cast(str,file_path)
			media.append(telebot.types.InputMediaPhoto(open(photo_file, 'rb')))
	if media:
		bot.send_message(call.message.chat.id, f'–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ - {call.data[10:]}')
		bot.send_media_group(call.message.chat.id, media)
	else:
		bot.send_message(call.message.chat.id, "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

def personal_calc(message):
	markup = types.InlineKeyboardMarkup()
	full_project = types.InlineKeyboardButton('üóùÔ∏è –ü–æ–¥ –∫–ª—é—á',callback_data='project_–î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç –ø–æ–¥ –∫–ª—é—á')
	project = types.InlineKeyboardButton('üí•–î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç', callback_data='project_–î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç')
	express = types.InlineKeyboardButton('üöÖ –≠–∫—Å–ø—Ä–µ—Å—Å', callback_data='project_–≠–∫—Å–ø—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç')
	project_about = types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ —á–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —É—Å–ª—É–≥–∏', callback_data='project_about_services')
	markup.row(full_project)
	markup.row(project,express)
	markup.row(project_about)
	bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏',
					 reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('project_'))
def callback_property_type(call):
	global property_type
	property_type = call.data[8:]
	if property_type == 'about_services':
		service_description(call.message)
		personal_calc(call.message)
	else:
		bot.send_message(call.from_user.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {property_type}')
		square_input(call.message)

def square_input(message):
	bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è:')
	bot.register_next_step_handler(message, write_square)

def write_square(message):
	user_data[message.from_user.id] = User(message.from_user.first_name)
	while True:
		global square
		square = message.text
		price = float()
		if property_type == '–î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç –ø–æ–¥ –∫–ª—é—á':
			price = 3000
		elif (property_type == '–î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç') or (property_type == 'express_project' and float(square) <=5):
			price = 2500
		elif property_type == '–≠–∫—Å–ø—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç' and float(square) >5:
			price = 2200
		try:
			insert_reason = '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç'
			calc = float(square) * price
			calc_result = '{0:,}'.format(calc).replace(',', ' ')
			period = int(0)
			if 0 <= float(square) <= 15:
				period = 14
			elif float(square) > 15:
				period = float(square) * 1
			with open(f'Text/{property_type}.txt', 'r', encoding='utf-8') as file:
				lines = file.readlines()
			message_calc = (
						f'{property_type}\n\n'
						f'{"".join(lines)}\n'
					    f'üí∏ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ - {str(calc_result)} —Ä—É–±–ª–µ–π\n'
					    f'üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - {int(period)} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π')
			bot.send_message(message.chat.id, message_calc)
			insert_user_data(message,insert_reason)
			ask_for_contact(message)
			handle_contact(message)
			# message.contact = None
			# bot.register_next_step_handler(message, menu_message)
			# bot.register_next_step_handler(message, menu_message)
			break
		except ValueError:
			bot.send_message(message.chat.id,'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
			personal_calc(message)
			break
bot.infinity_polling()